//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `presentation-with-note.pdf`.
    static let presentationWithNotePdf = Rswift.FileResource(bundle: R.hostingBundle, name: "presentation-with-note", pathExtension: "pdf")
    
    /// `bundle.url(forResource: "presentation-with-note", withExtension: "pdf")`
    static func presentationWithNotePdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.presentationWithNotePdf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `first`.
    static let first = Rswift.ImageResource(bundle: R.hostingBundle, name: "first")
    /// Image `register_checkbox_normal`.
    static let register_checkbox_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_checkbox_normal")
    /// Image `register_checkbox_selected`.
    static let register_checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_checkbox_selected")
    /// Image `register_nickname`.
    static let register_nickname = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_nickname")
    /// Image `register_password`.
    static let register_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_password")
    /// Image `register_phone`.
    static let register_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_phone")
    /// Image `register_photo`.
    static let register_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "register_photo")
    /// Image `second`.
    static let second = Rswift.ImageResource(bundle: R.hostingBundle, name: "second")
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_checkbox_normal", bundle: ..., traitCollection: ...)`
    static func register_checkbox_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_checkbox_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_checkbox_selected", bundle: ..., traitCollection: ...)`
    static func register_checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_checkbox_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_nickname", bundle: ..., traitCollection: ...)`
    static func register_nickname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_nickname, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_password", bundle: ..., traitCollection: ...)`
    static func register_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_phone", bundle: ..., traitCollection: ...)`
    static func register_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "register_photo", bundle: ..., traitCollection: ...)`
    static func register_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.register_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "second", bundle: ..., traitCollection: ...)`
    static func second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.second, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Register`.
    static let register = _R.storyboard.register()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Register", bundle: ...)`
    static func register(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.register)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try register.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "second") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'second' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "first") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'first' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct register: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Register"
      
      static func validate() throws {
        if UIKit.UIImage(named: "register_checkbox_selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_checkbox_selected' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_nickname") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_nickname' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_password' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_photo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_photo' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_checkbox_normal") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_checkbox_normal' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "register_phone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'register_phone' is used in storyboard 'Register', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}